// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1982.Robot2016;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveSystemLeftMotor;
    public static SpeedController driveSystemRightMotor;
    public static RobotDrive driveSystemRobotDrive;
    public static Encoder driveSystemLeftEncoder;
    public static Encoder driveSystemRightEncoder;
    public static SpeedController winchWinchMotor;
    public static Encoder winchWinchEncoder;
    public static Encoder sliderSliderEncoder;
    public static SpeedController sliderSliderMotor;
    public static SpeedController rollerRollerMotor;
    public static Encoder armArmEncoder;
    public static CANTalon armArmMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystemLeftMotor = new Talon(1);
        LiveWindow.addActuator("DriveSystem", "LeftMotor", (Talon) driveSystemLeftMotor);
        
        driveSystemRightMotor = new Talon(0);
        LiveWindow.addActuator("DriveSystem", "RightMotor", (Talon) driveSystemRightMotor);
        
        driveSystemRobotDrive = new RobotDrive(driveSystemLeftMotor, driveSystemRightMotor);
        
        driveSystemRobotDrive.setSafetyEnabled(true);
        driveSystemRobotDrive.setExpiration(0.1);
        driveSystemRobotDrive.setSensitivity(0.5);
        driveSystemRobotDrive.setMaxOutput(1.0);

        driveSystemLeftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveSystem", "LeftEncoder", driveSystemLeftEncoder);
        driveSystemLeftEncoder.setDistancePerPulse(0.0014544410433286);
        driveSystemLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveSystemRightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveSystem", "RightEncoder", driveSystemRightEncoder);
        driveSystemRightEncoder.setDistancePerPulse(0.0014544410433286);
        driveSystemRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        winchWinchMotor = new Victor(2);
        LiveWindow.addActuator("Winch", "WinchMotor", (Victor) winchWinchMotor);
        
        winchWinchEncoder = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Winch", "WinchEncoder", winchWinchEncoder);
        winchWinchEncoder.setDistancePerPulse(1.0);
        winchWinchEncoder.setPIDSourceType(PIDSourceType.kRate);
        sliderSliderEncoder = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Slider", "SliderEncoder", sliderSliderEncoder);
        sliderSliderEncoder.setDistancePerPulse(1.0);
        sliderSliderEncoder.setPIDSourceType(PIDSourceType.kRate);
        sliderSliderMotor = new Victor(4);
        LiveWindow.addActuator("Slider", "SliderMotor", (Victor) sliderSliderMotor);
        
        rollerRollerMotor = new Victor(3);
        LiveWindow.addActuator("Roller", "RollerMotor", (Victor) rollerRollerMotor);
        
        armArmEncoder = new Encoder(8, 9, false, EncodingType.k4X);
        LiveWindow.addSensor("Arm", "ArmEncoder", armArmEncoder);
        armArmEncoder.setDistancePerPulse(1.0);
        armArmEncoder.setPIDSourceType(PIDSourceType.kRate);
        armArmMotor = new CANTalon(0);
        LiveWindow.addActuator("Arm", "ArmMotor", armArmMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
